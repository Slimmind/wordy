/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'

const SignupLazyRouteImport = createFileRoute('/signup')()
const SearchLazyRouteImport = createFileRoute('/search')()
const ProfileLazyRouteImport = createFileRoute('/profile')()
const PhrasesLazyRouteImport = createFileRoute('/phrases')()
const LoginLazyRouteImport = createFileRoute('/login')()
const AddItemLazyRouteImport = createFileRoute('/add-item')()
const OwnCollectionIndexLazyRouteImport = createFileRoute('/own-collection/')()
const ItemsIndexLazyRouteImport = createFileRoute('/items/')()
const OwnCollectionUserIdLazyRouteImport = createFileRoute(
  '/own-collection/$userId',
)()
const ItemsItemIdLazyRouteImport = createFileRoute('/items/$itemId')()
const EditItemIdLazyRouteImport = createFileRoute('/edit/$itemId')()
const AddItemSearchQueryLazyRouteImport = createFileRoute(
  '/add-item/$searchQuery',
)()

const SignupLazyRoute = SignupLazyRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))
const SearchLazyRoute = SearchLazyRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/search.lazy').then((d) => d.Route))
const ProfileLazyRoute = ProfileLazyRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))
const PhrasesLazyRoute = PhrasesLazyRouteImport.update({
  id: '/phrases',
  path: '/phrases',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/phrases.lazy').then((d) => d.Route))
const LoginLazyRoute = LoginLazyRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))
const AddItemLazyRoute = AddItemLazyRouteImport.update({
  id: '/add-item',
  path: '/add-item',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/add-item.lazy').then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OwnCollectionIndexLazyRoute = OwnCollectionIndexLazyRouteImport.update({
  id: '/own-collection/',
  path: '/own-collection/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/own-collection/index.lazy').then((d) => d.Route),
)
const ItemsIndexLazyRoute = ItemsIndexLazyRouteImport.update({
  id: '/items/',
  path: '/items/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/items/index.lazy').then((d) => d.Route))
const OwnCollectionUserIdLazyRoute = OwnCollectionUserIdLazyRouteImport.update({
  id: '/own-collection/$userId',
  path: '/own-collection/$userId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/own-collection/$userId.lazy').then((d) => d.Route),
)
const ItemsItemIdLazyRoute = ItemsItemIdLazyRouteImport.update({
  id: '/items/$itemId',
  path: '/items/$itemId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/items/$itemId.lazy').then((d) => d.Route))
const EditItemIdLazyRoute = EditItemIdLazyRouteImport.update({
  id: '/edit/$itemId',
  path: '/edit/$itemId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/edit.$itemId.lazy').then((d) => d.Route))
const AddItemSearchQueryLazyRoute = AddItemSearchQueryLazyRouteImport.update({
  id: '/$searchQuery',
  path: '/$searchQuery',
  getParentRoute: () => AddItemLazyRoute,
} as any).lazy(() =>
  import('./routes/add-item.$searchQuery.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-item': typeof AddItemLazyRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/phrases': typeof PhrasesLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/search': typeof SearchLazyRoute
  '/signup': typeof SignupLazyRoute
  '/add-item/$searchQuery': typeof AddItemSearchQueryLazyRoute
  '/edit/$itemId': typeof EditItemIdLazyRoute
  '/items/$itemId': typeof ItemsItemIdLazyRoute
  '/own-collection/$userId': typeof OwnCollectionUserIdLazyRoute
  '/items': typeof ItemsIndexLazyRoute
  '/own-collection': typeof OwnCollectionIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-item': typeof AddItemLazyRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/phrases': typeof PhrasesLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/search': typeof SearchLazyRoute
  '/signup': typeof SignupLazyRoute
  '/add-item/$searchQuery': typeof AddItemSearchQueryLazyRoute
  '/edit/$itemId': typeof EditItemIdLazyRoute
  '/items/$itemId': typeof ItemsItemIdLazyRoute
  '/own-collection/$userId': typeof OwnCollectionUserIdLazyRoute
  '/items': typeof ItemsIndexLazyRoute
  '/own-collection': typeof OwnCollectionIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/add-item': typeof AddItemLazyRouteWithChildren
  '/login': typeof LoginLazyRoute
  '/phrases': typeof PhrasesLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/search': typeof SearchLazyRoute
  '/signup': typeof SignupLazyRoute
  '/add-item/$searchQuery': typeof AddItemSearchQueryLazyRoute
  '/edit/$itemId': typeof EditItemIdLazyRoute
  '/items/$itemId': typeof ItemsItemIdLazyRoute
  '/own-collection/$userId': typeof OwnCollectionUserIdLazyRoute
  '/items/': typeof ItemsIndexLazyRoute
  '/own-collection/': typeof OwnCollectionIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add-item'
    | '/login'
    | '/phrases'
    | '/profile'
    | '/search'
    | '/signup'
    | '/add-item/$searchQuery'
    | '/edit/$itemId'
    | '/items/$itemId'
    | '/own-collection/$userId'
    | '/items'
    | '/own-collection'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add-item'
    | '/login'
    | '/phrases'
    | '/profile'
    | '/search'
    | '/signup'
    | '/add-item/$searchQuery'
    | '/edit/$itemId'
    | '/items/$itemId'
    | '/own-collection/$userId'
    | '/items'
    | '/own-collection'
  id:
    | '__root__'
    | '/'
    | '/add-item'
    | '/login'
    | '/phrases'
    | '/profile'
    | '/search'
    | '/signup'
    | '/add-item/$searchQuery'
    | '/edit/$itemId'
    | '/items/$itemId'
    | '/own-collection/$userId'
    | '/items/'
    | '/own-collection/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddItemLazyRoute: typeof AddItemLazyRouteWithChildren
  LoginLazyRoute: typeof LoginLazyRoute
  PhrasesLazyRoute: typeof PhrasesLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  SearchLazyRoute: typeof SearchLazyRoute
  SignupLazyRoute: typeof SignupLazyRoute
  EditItemIdLazyRoute: typeof EditItemIdLazyRoute
  ItemsItemIdLazyRoute: typeof ItemsItemIdLazyRoute
  OwnCollectionUserIdLazyRoute: typeof OwnCollectionUserIdLazyRoute
  ItemsIndexLazyRoute: typeof ItemsIndexLazyRoute
  OwnCollectionIndexLazyRoute: typeof OwnCollectionIndexLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/phrases': {
      id: '/phrases'
      path: '/phrases'
      fullPath: '/phrases'
      preLoaderRoute: typeof PhrasesLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-item': {
      id: '/add-item'
      path: '/add-item'
      fullPath: '/add-item'
      preLoaderRoute: typeof AddItemLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/own-collection/': {
      id: '/own-collection/'
      path: '/own-collection'
      fullPath: '/own-collection'
      preLoaderRoute: typeof OwnCollectionIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/items/': {
      id: '/items/'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/own-collection/$userId': {
      id: '/own-collection/$userId'
      path: '/own-collection/$userId'
      fullPath: '/own-collection/$userId'
      preLoaderRoute: typeof OwnCollectionUserIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/items/$itemId': {
      id: '/items/$itemId'
      path: '/items/$itemId'
      fullPath: '/items/$itemId'
      preLoaderRoute: typeof ItemsItemIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit/$itemId': {
      id: '/edit/$itemId'
      path: '/edit/$itemId'
      fullPath: '/edit/$itemId'
      preLoaderRoute: typeof EditItemIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-item/$searchQuery': {
      id: '/add-item/$searchQuery'
      path: '/$searchQuery'
      fullPath: '/add-item/$searchQuery'
      preLoaderRoute: typeof AddItemSearchQueryLazyRouteImport
      parentRoute: typeof AddItemLazyRoute
    }
  }
}

interface AddItemLazyRouteChildren {
  AddItemSearchQueryLazyRoute: typeof AddItemSearchQueryLazyRoute
}

const AddItemLazyRouteChildren: AddItemLazyRouteChildren = {
  AddItemSearchQueryLazyRoute: AddItemSearchQueryLazyRoute,
}

const AddItemLazyRouteWithChildren = AddItemLazyRoute._addFileChildren(
  AddItemLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddItemLazyRoute: AddItemLazyRouteWithChildren,
  LoginLazyRoute: LoginLazyRoute,
  PhrasesLazyRoute: PhrasesLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  SearchLazyRoute: SearchLazyRoute,
  SignupLazyRoute: SignupLazyRoute,
  EditItemIdLazyRoute: EditItemIdLazyRoute,
  ItemsItemIdLazyRoute: ItemsItemIdLazyRoute,
  OwnCollectionUserIdLazyRoute: OwnCollectionUserIdLazyRoute,
  ItemsIndexLazyRoute: ItemsIndexLazyRoute,
  OwnCollectionIndexLazyRoute: OwnCollectionIndexLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
